// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  TENANT
  MANAGER
}

model property {
  id                 String                @id @default(cuid())
  name               String
  description        String
  created_at         DateTime              @default(now())
  updated_at         DateTime              @updatedAt
  user_id            String //manager
  image_url          String[]
  created_by         user                  @relation(fields: [user_id], references: [id])
  bookings           booking[]
  MaintenanceRequest maintenance_request[]
}

model booking {
  id                  String   @id @default(cuid())
  property_id         String
  user_id             String //tenant
  remarks             String?
  check_in            DateTime
  check_out           DateTime
  rental_price        Decimal
  rent_collection_day Int
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt
  property            property @relation(fields: [property_id], references: [id])
  user                user     @relation(fields: [user_id], references: [id])
}

model maintenance_request {
  id                         String                       @id @default(cuid())
  property_id                String
  user_id                    String //tenant
  title                      String
  description                String
  image_url                  String[]
  resolved                   Boolean                      @default(false)
  created_at                 DateTime                     @default(now())
  updated_at                 DateTime                     @updatedAt
  property                   property                     @relation(fields: [property_id], references: [id])
  maintenance_request_update maintenance_request_update[]
  user                       user                         @relation(fields: [user_id], references: [id])
}

model maintenance_request_update {
  id                   String              @id @default(cuid())
  maintenanceRequestId String
  description          String
  image_url            String
  user_id              String //tenant or manager
  created_at           DateTime            @default(now())
  updated_at           DateTime            @updatedAt
  maintenance_request  maintenance_request @relation(fields: [maintenanceRequestId], references: [id])
  user                 user                @relation(fields: [user_id], references: [id])
}

model user {
  id                         String                       @id @default(cuid())
  name                       String
  email                      String                       @unique
  password                   String
  role                       Role
  created_at                 DateTime                     @default(now())
  updated_at                 DateTime                     @updatedAt
  verified                   Boolean                      @default(false)
  property                   property[]
  booking                    booking[]
  maintenance_request        maintenance_request[]
  maintenance_request_update maintenance_request_update[]
  verificationToken          verification_token?
}

model chat_history {
  id         String   @id @default(cuid())
  message    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  system     Boolean  @default(false)
}

model verification_token {
  id         String   @id @default(cuid())
  token      String
  user_id    String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       user     @relation(fields: [user_id], references: [id])
}

model session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}
