// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  TENANT
  MANAGER
}

model Property {
  id                 String               @id @default(cuid())
  name               String
  description        String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  createdById        String
  createdBy          User                 @relation(fields: [createdById], references: [id])
  bookings           Booking[]
  MaintenanceRequest MaintenanceRequest[]
}

model Booking {
  id                String       @id @default(cuid())
  propertyId        String
  userId            String
  remarks           String?
  checkIn           DateTime
  checkOut          DateTime
  rentalPrice       Decimal
  rentCollectionDay Int
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  property          Property     @relation(fields: [propertyId], references: [id])
  user              User         @relation(fields: [userId], references: [id])
  payment           Payment[]
  rentalBill        RentalBill[]
}

model MaintenanceRequest {
  id                        String                     @id @default(cuid())
  propertyId                String
  userId                    String
  description               String
  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime                   @updatedAt
  property                  Property                   @relation(fields: [propertyId], references: [id])
  maintenanceRequestUpdates MaintenanceRequestUpdate[]
  user                      User                       @relation(fields: [userId], references: [id])
}

model MaintenanceRequestUpdate {
  id                   String             @id @default(cuid())
  maintenanceRequestId String
  description          String
  userId               String
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  maintenanceRequest   MaintenanceRequest @relation(fields: [maintenanceRequestId], references: [id])
  user                 User               @relation(fields: [userId], references: [id])
}

model RentalBill {
  id        String   @id @default(cuid())
  bookingId String
  userId    String
  amount    Decimal
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  booking   Booking  @relation(fields: [bookingId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Payment {
  id        String   @id @default(cuid())
  bookingId String
  userId    String
  amount    Decimal
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  booking   Booking  @relation(fields: [bookingId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model User {
  id                       String                     @id @default(cuid())
  name                     String
  email                    String                     @unique
  password                 String
  role                     Role
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt
  verified                 Boolean                    @default(false)
  Property                 Property[]
  Payment                  Payment[]
  Booking                  Booking[]
  maintenanceRequest       MaintenanceRequest[]
  maintenanceRequestUpdate MaintenanceRequestUpdate[]
  verificationToken        verificationToken?
  rentalBill               RentalBill[]
}

model verificationToken {
  id        String   @id @default(cuid())
  token     String
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}
